{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"config",
				"configCommandButtons"
			],
			[
				"input",
				"inputElementVar"
			],
			[
				"getAllForms",
				"getAllInfoForms"
			],
			[
				"framMenue",
				"frameMenuElementsFormTop"
			],
			[
				"widget",
				"widget_tkinter"
			],
			[
				"id",
				"id_element"
			],
			[
				"frameBody",
				"frameBodyMenuForm"
			],
			[
				"label",
				"labelFrameFieldForm"
			],
			[
				"data",
				"database"
			],
			[
				"frame",
				"frameCreateForm"
			],
			[
				"font",
				"fontMin"
			],
			[
				"get",
				"getAllElemments"
			],
			[
				"Data",
				"Database"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/F/Projetos/desenvolvendo/Livros/src/main.py",
			"settings":
			{
				"buffer_size": 8891,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/F/Projetos/desenvolvendo/Livros/src/modules/Guis.py",
			"settings":
			{
				"buffer_size": 13902,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/F/Projetos/desenvolvendo/Livros/src/modules/Books.py",
			"settings":
			{
				"buffer_size": 4174,
				"encoding": "Western (Windows 1252)",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/F/Projetos/desenvolvendo/Livros/src/modules/Database.py",
			"settings":
			{
				"buffer_size": 5674,
				"encoding": "Western (Windows 1252)",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/F/Projetos/desenvolvendo/Livros/src/modules/Table.py",
			"settings":
			{
				"buffer_size": 15189,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "<DOCTYPE html>\n\t<html>\n\t<head>\n\t\t<title>Jogo: Resgate do Bran</title>\n\t\t<meta charset=\"utf-8\">\n\t\t<script type=\"text/javascript\">\n\t\t\tscore = 5;\n\t\t\tasks = [\n\t\t\t[\"Quem Descobriu o Brasil ?\", \"os indios\"], \n\t\t\t\n\t\t\t]\n\t\t\tindexAsk = 0;\n\n\t\t\tfunction validate(){\n\t\t\t\tvar answer = formuser.answer.value;\n\t\t\t\tscoreElement = document.getElementById(\"score\");\n\t\t\t\tif(answer == \"\" ){\n\t\t\t\t\talert('Preencha o campo Resposta.');\n\t\t\t\t\tformuser.answer.focus();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (indexAsk < asks.length){\n\t\t\t\t\t\tif (answer.toLowerCase() == asks[indexAsk][1].toLowerCase()){\n\t\t\t\t\t\t\twindow.open('https://www.google.com', '_blank');//abrir em nova aba\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tif (score - 4 < 0){\n\t\t\t\t\t\t\t\tscore = 0;\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tscore -= 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tindexAsk += 1;\n\t\t\t\t\t\tscoreElement.innerHTML = score;\n\t\t\t\t\t\tnextAsk(indexAsk);\n\n\t\t\t\t\t}\n\t\t\t\t\tcleanField();\n\t\t\t\t}\n\t\t    }\n\t\t    function nextAsk(){//Configura o titulo da proxima pergunta\n\t\t    \t\n\t\t    \tvar askElement = document.getElementById(\"ask\");\n\t\t    \t\n\t\t    \ttry{\n\t\t    \t\taskElement.innerHTML = asks[indexAsk][0];\n\t\t    \t}\n\t\t    \tcatch{}\n\t\t    \tformuser.answer.focus();\n\t\t    }\n\n\t\t    function cleanField(){//Limpa o campo de resposta\n\t\t    \tvar answerElement = formuser.answer;\n\t\t    \tanswerElement.value = \"\";\n\t\t    }\n\n\n\t\t</script>\n\n\t</head>\n\t<body onload=\"nextAsk()\">\n\t\t<h1>Resgate do Bran</h1>\n\t\t<form name=\"formuser\"  method=\"post\">\n\t\t\t<label id=\"ask\"></label>\n\t\t\t<br><br>\n\t\t\tResposta: <input type=\"text\" name=\"answer\">\n\t\t\t<button type=\"button\" class=\"btn btn-primary\"  onclick=\"validate()\">OK</button\n\t\t\t<br><br>\n\t\t\t<label id=\"score\">5</label>\n\n\t\t</form>\n\t</body>\n\t</html>",
			"file": "/C/Users/Israel/Downloads/validar.html",
			"file_size": 1714,
			"file_write_time": 131849490180879168,
			"settings":
			{
				"buffer_size": 1642,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "# Author: Miguel Martinez Lopez\n#\n# Version: 1.0.7\n#\n# Uncomment the next line to see my email\n# print(\"Author's email: %s\"%\"61706c69636163696f6e616d656469646140676d61696c2e636f6d\".decode(\"hex\"))\n\n\"\"\"\nThese are the default bindings:\n    Click button 1 on entry: Show calendar\n    Click button 1 outsite calendar and entry: Hide calendar\n    Escape: Hide calendar\n    CTRL + PAGE UP: Move to the previous month.\n    CTRL + PAGE DOWN: Move to the next month.\n    CTRL + SHIFT + PAGE UP: Move to the previous year.\n    CTRL + SHIFT + PAGE DOWN: Move to the next year.\n    CTRL + LEFT: Move to the previous day.\n    CTRL + RIGHT: Move to the next day.\n    CTRL + UP: Move to the previous week.\n    CTRL + DOWN: Move to the next week.\n    CTRL + END: Close the datepicker and erase the date.\n    CTRL + HOME: Move to the current month.\n    CTRL + SPACE: Show date on calendar\n    CTRL + Return: Set current selection to entry\n\"\"\"\n\nimport calendar\nimport datetime\n\ntry:\n    import Tkinter\n    import tkFont\n    import ttk\n\n    from Tkconstants import CENTER, LEFT, N, E, W, S\n    from Tkinter import StringVar\nexcept ImportError: # py3k\n    import tkinter as Tkinter\n    import tkinter.font as tkFont\n    import tkinter.ttk as ttk\n\n    from tkinter.constants import CENTER, LEFT, N, E, W, S\n    from tkinter import StringVar\n\ndef get_calendar(locale, fwday):\n    # instantiate proper calendar class\n    if locale is None:\n        return calendar.TextCalendar(fwday)\n    else:\n        return calendar.LocaleTextCalendar(fwday, locale)\n\n\nclass Calendar(ttk.Frame):\n    datetime = calendar.datetime.datetime\n    timedelta = calendar.datetime.timedelta\n\n    def __init__(self, master=None, year=None, month=None, firstweekday=calendar.MONDAY, \n        locale=None, activebackground='#b1dcfb', activeforeground='black', selectbackground='#003eff', \n        selectforeground='white', command=None, borderwidth=1, relief=\"solid\", on_click_month_button=None):\n        \"\"\"\n        WIDGET OPTIONS\n\n            locale, firstweekday, year, month, selectbackground,\n            selectforeground, activebackground, activeforeground, \n            command, borderwidth, relief, on_click_month_button\n        \"\"\"\n\n        if year is None:\n            year = self.datetime.now().year\n        \n        if month is None:\n            month = self.datetime.now().month\n\n        self._selected_date = None\n\n        self._sel_bg = selectbackground \n        self._sel_fg = selectforeground\n\n        self._act_bg = activebackground \n        self._act_fg = activeforeground\n        \n        self.on_click_month_button = on_click_month_button\n        \n        self._selection_is_visible = False\n        self._command = command\n\n        ttk.Frame.__init__(self, master, borderwidth=borderwidth, relief=relief)\n        \n        self.bind(\"<FocusIn>\", lambda event:self.event_generate('<<DatePickerFocusIn>>'))\n        self.bind(\"<FocusOut>\", lambda event:self.event_generate('<<DatePickerFocusOut>>'))\n    \n        self._cal = get_calendar(locale, firstweekday)\n\n        # custom ttk styles\n        style = ttk.Style()\n        style.layout('L.TButton', (\n            [('Button.focus', {'children': [('Button.leftarrow', None)]})]\n        ))\n        style.layout('R.TButton', (\n            [('Button.focus', {'children': [('Button.rightarrow', None)]})]\n        ))\n\n        self._font = tkFont.Font()\n        \n        self._header_var = StringVar()\n\n        # header frame and its widgets\n        hframe = ttk.Frame(self)\n        lbtn = ttk.Button(hframe, style='L.TButton', command=self._on_press_left_button)\n        lbtn.pack(side=LEFT)\n        \n        self._header = ttk.Label(hframe, width=15, anchor=CENTER, textvariable=self._header_var)\n        self._header.pack(side=LEFT, padx=12)\n        \n        rbtn = ttk.Button(hframe, style='R.TButton', command=self._on_press_right_button)\n        rbtn.pack(side=LEFT)\n        hframe.grid(columnspan=7, pady=4)\n\n        self._day_labels = {}\n\n        days_of_the_week = self._cal.formatweekheader(3).split()\n \n        for i, day_of_the_week in enumerate(days_of_the_week):\n            Tkinter.Label(self, text=day_of_the_week, background='grey90').grid(row=1, column=i, sticky=N+E+W+S)\n\n        for i in range(6):\n            for j in range(7):\n                self._day_labels[i,j] = label = Tkinter.Label(self, background = \"white\")\n                \n                label.grid(row=i+2, column=j, sticky=N+E+W+S)\n                label.bind(\"<Enter>\", lambda event: event.widget.configure(background=self._act_bg, foreground=self._act_fg))\n                label.bind(\"<Leave>\", lambda event: event.widget.configure(background=\"white\"))\n\n                label.bind(\"<1>\", self._pressed)\n        \n        # adjust its columns width\n        font = tkFont.Font()\n        maxwidth = max(font.measure(text) for text in days_of_the_week)\n        for i in range(7):\n            self.grid_columnconfigure(i, minsize=maxwidth, weight=1)\n\n        self._year = None\n        self._month = None\n\n        # insert dates in the currently empty calendar\n        self._build_calendar(year, month)\n\n    def _build_calendar(self, year, month):\n        if not( self._year == year and self._month == month):\n            self._year = year\n            self._month = month\n\n            # update header text (Month, YEAR)\n            header = self._cal.formatmonthname(year, month, 0)\n            self._header_var.set(header.title())\n\n            # update calendar shown dates\n            cal = self._cal.monthdayscalendar(year, month)\n\n            for i in range(len(cal)):\n                \n                week = cal[i] \n                fmt_week = [('%02d' % day) if day else '' for day in week]\n                \n                for j, day_number in enumerate(fmt_week):\n                    self._day_labels[i,j][\"text\"] = day_number\n\n            if len(cal) < 6:\n                for j in range(7):\n                    self._day_labels[5,j][\"text\"] = \"\"\n\n        if self._selected_date is not None and self._selected_date.year == self._year and self._selected_date.month == self._month:\n            self._show_selection()\n\n    def _find_label_coordinates(self, date):\n         first_weekday_of_the_month = (date.weekday() - date.day) % 7\n         \n         return divmod((first_weekday_of_the_month - self._cal.firstweekday)%7 + date.day, 7)\n        \n    def _show_selection(self):\n        \"\"\"Show a new selection.\"\"\"\n\n        i,j = self._find_label_coordinates(self._selected_date)\n\n        label = self._day_labels[i,j]\n\n        label.configure(background=self._sel_bg, foreground=self._sel_fg)\n\n        label.unbind(\"<Enter>\")\n        label.unbind(\"<Leave>\")\n        \n        self._selection_is_visible = True\n        \n    def _clear_selection(self):\n        \"\"\"Show a new selection.\"\"\"\n        i,j = self._find_label_coordinates(self._selected_date)\n\n        label = self._day_labels[i,j]\n        label.configure(background= \"white\", foreground=\"black\")\n\n        label.bind(\"<Enter>\", lambda event: event.widget.configure(background=self._act_bg, foreground=self._act_fg))\n        label.bind(\"<Leave>\", lambda event: event.widget.configure(background=\"white\"))\n\n        self._selection_is_visible = False\n\n    # Callback\n\n    def _pressed(self, evt):\n        \"\"\"Clicked somewhere in the calendar.\"\"\"\n        \n        text = evt.widget[\"text\"]\n        \n        if text == \"\":\n            return\n\n        day_number = int(text)\n\n        new_selected_date = datetime.datetime(self._year, self._month, day_number)\n        if self._selected_date != new_selected_date:\n            if self._selected_date is not None:\n                self._clear_selection()\n            \n            self._selected_date = new_selected_date\n            \n            self._show_selection()\n        \n        if self._command:\n            self._command(self._selected_date)\n\n    def _on_press_left_button(self):\n        self.prev_month()\n        \n        if self.on_click_month_button is not None:\n            self.on_click_month_button()\n    \n    def _on_press_right_button(self):\n        self.next_month()\n\n        if self.on_click_month_button is not None:\n            self.on_click_month_button()\n        \n    def select_prev_day(self):\n        \"\"\"Updated calendar to show the previous day.\"\"\"\n        if self._selected_date is None:\n            self._selected_date = datetime.datetime(self._year, self._month, 1)\n        else:\n            self._clear_selection()\n            self._selected_date = self._selected_date - self.timedelta(days=1)\n\n        self._build_calendar(self._selected_date.year, self._selected_date.month) # reconstruct calendar\n\n    def select_next_day(self):\n        \"\"\"Update calendar to show the next day.\"\"\"\n\n        if self._selected_date is None:\n            self._selected_date = datetime.datetime(self._year, self._month, 1)\n        else:\n            self._clear_selection()\n            self._selected_date = self._selected_date + self.timedelta(days=1)\n\n        self._build_calendar(self._selected_date.year, self._selected_date.month) # reconstruct calendar\n\n\n    def select_prev_week_day(self):\n        \"\"\"Updated calendar to show the previous week.\"\"\"\n        if self._selected_date is None:\n            self._selected_date = datetime.datetime(self._year, self._month, 1)\n        else:\n            self._clear_selection()\n            self._selected_date = self._selected_date - self.timedelta(days=7)\n\n        self._build_calendar(self._selected_date.year, self._selected_date.month) # reconstruct calendar\n\n    def select_next_week_day(self):\n        \"\"\"Update calendar to show the next week.\"\"\"\n        if self._selected_date is None:\n            self._selected_date = datetime.datetime(self._year, self._month, 1)\n        else:\n            self._clear_selection()\n            self._selected_date = self._selected_date + self.timedelta(days=7)\n\n        self._build_calendar(self._selected_date.year, self._selected_date.month) # reconstruct calendar\n\n    def select_current_date(self):\n        \"\"\"Update calendar to current date.\"\"\"\n        if self._selection_is_visible: self._clear_selection()\n\n        self._selected_date = datetime.datetime.now()\n        self._build_calendar(self._selected_date.year, self._selected_date.month)\n\n    def prev_month(self):\n        \"\"\"Updated calendar to show the previous week.\"\"\"\n        if self._selection_is_visible: self._clear_selection()\n        \n        date = self.datetime(self._year, self._month, 1) - self.timedelta(days=1)\n        self._build_calendar(date.year, date.month) # reconstuct calendar\n\n    def next_month(self):\n        \"\"\"Update calendar to show the next month.\"\"\"\n        if self._selection_is_visible: self._clear_selection()\n\n        date = self.datetime(self._year, self._month, 1) + \\\n            self.timedelta(days=calendar.monthrange(self._year, self._month)[1] + 1)\n\n        self._build_calendar(date.year, date.month) # reconstuct calendar\n\n    def prev_year(self):\n        \"\"\"Updated calendar to show the previous year.\"\"\"\n        \n        if self._selection_is_visible: self._clear_selection()\n\n        self._build_calendar(self._year-1, self._month) # reconstruct calendar\n\n    def next_year(self):\n        \"\"\"Update calendar to show the next year.\"\"\"\n        \n        if self._selection_is_visible: self._clear_selection()\n\n        self._build_calendar(self._year+1, self._month) # reconstruct calendar\n\n    def get_selection(self):\n        \"\"\"Return a datetime representing the current selected date.\"\"\"\n        return self._selected_date\n        \n    selection = get_selection\n\n    def set_selection(self, date):\n        \"\"\"Set the selected date.\"\"\"\n        if self._selected_date is not None and self._selected_date != date:\n            self._clear_selection()\n\n        self._selected_date = date\n\n        self._build_calendar(date.year, date.month) # reconstruct calendar\n\n# see this URL for date format information:\n#     https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior\n\nclass Datepicker(ttk.Entry):\n    def __init__(self, master, entrywidth=None, entrystyle=None, datevar=None,\n                 dateformat=\"%Y-%m-%d\", onselect=None, firstweekday=calendar.MONDAY, locale=None,\n                 activebackground='#b1dcfb', activeforeground='black', selectbackground='#003eff',\n                 selectforeground='white', borderwidth=1, relief=\"solid\"):\n        \n        if datevar is not None:\n            self.date_var = datevar\n            \n        else:\n            self.date_var = Tkinter.StringVar()\n\n        entry_config = {}\n        if entrywidth is not None:\n            entry_config[\"width\"] = entrywidth\n            \n        if entrystyle is not None:\n            entry_config[\"style\"] = entrystyle\n    \n        ttk.Entry.__init__(self, master, textvariable=self.date_var, width=10, **entry_config)\n\n        self.date_format = dateformat\n        \n        self._is_calendar_visible = False\n        self._on_select_date_command = onselect\n\n        self.calendar_frame = Calendar(self.winfo_toplevel(), firstweekday=firstweekday, locale=locale, activebackground=activebackground, activeforeground=activeforeground, selectbackground=selectbackground, selectforeground=selectforeground, command=self._on_selected_date, on_click_month_button=lambda: self.focus())\n\n        self.bind_all(\"<1>\", self._on_click, \"+\")\n\n        self.bind(\"<FocusOut>\", lambda event: self._on_entry_focus_out())\n        self.bind(\"<Escape>\", lambda event: self.hide_calendar())\n        self.calendar_frame.bind(\"<<DatePickerFocusOut>>\", lambda event: self._on_calendar_focus_out())\n\n\n        # CTRL + PAGE UP: Move to the previous month.\n        self.bind(\"<Control-Prior>\", lambda event: self.calendar_frame.prev_month())\n        \n        # CTRL + PAGE DOWN: Move to the next month.\n        self.bind(\"<Control-Next>\", lambda event: self.calendar_frame.next_month())\n\n        # CTRL + SHIFT + PAGE UP: Move to the previous year.\n        self.bind(\"<Control-Shift-Prior>\", lambda event: self.calendar_frame.prev_year())\n\n        # CTRL + SHIFT + PAGE DOWN: Move to the next year.\n        self.bind(\"<Control-Shift-Next>\", lambda event: self.calendar_frame.next_year())\n        \n        # CTRL + LEFT: Move to the previous day.\n        self.bind(\"<Control-Left>\", lambda event: self.calendar_frame.select_prev_day())\n        \n        # CTRL + RIGHT: Move to the next day.\n        self.bind(\"<Control-Right>\", lambda event: self.calendar_frame.select_next_day())\n        \n        # CTRL + UP: Move to the previous week.\n        self.bind(\"<Control-Up>\", lambda event: self.calendar_frame.select_prev_week_day())\n        \n        # CTRL + DOWN: Move to the next week.\n        self.bind(\"<Control-Down>\", lambda event: self.calendar_frame.select_next_week_day())\n\n        # CTRL + END: Close the datepicker and erase the date.\n        self.bind(\"<Control-End>\", lambda event: self.erase())\n\n        # CTRL + HOME: Move to the current month.\n        self.bind(\"<Control-Home>\", lambda event: self.calendar_frame.select_current_date())\n        \n        # CTRL + SPACE: Show date on calendar\n        self.bind(\"<Control-space>\", lambda event: self.show_date_on_calendar())\n        \n        # CTRL + Return: Set to entry current selection\n        self.bind(\"<Control-Return>\", lambda event: self.set_date_from_calendar())\n\n    def set_date_from_calendar(self):\n        if self.is_calendar_visible:\n            selected_date = self.calendar_frame.selection()\n\n            if selected_date is not None:\n                self.date_var.set(selected_date.strftime(self.date_format))\n                \n                if self._on_select_date_command is not None:\n                    self._on_select_date_command(selected_date)\n\n            self.hide_calendar()\n      \n    @property\n    def current_text(self):\n        return self.date_var.get()\n        \n    @current_text.setter\n    def current_text(self, text):\n        return self.date_var.set(text)\n        \n    @property\n    def current_date(self):\n        try:\n            date = datetime.datetime.strptime(self.date_var.get(), self.date_format)\n            return date\n        except ValueError:\n            return None\n    \n    @current_date.setter\n    def current_date(self, date):\n        self.date_var.set(date.strftime(self.date_format))\n\n    def current_date_format(self, date):\n        \n    @property\n    def is_valid_date(self):\n        if self.current_date is None:\n            return False\n        else:\n            return True\n\n    def show_date_on_calendar(self):\n        date = self.current_date\n        if date is not None:\n            self.calendar_frame.set_selection(date)\n\n        self.show_calendar()\n\n    def show_calendar(self):\n        if not self._is_calendar_visible:\n            self.calendar_frame.place(in_=self, relx=0, rely=1)\n            self.calendar_frame.lift()\n\n        self._is_calendar_visible = True\n\n    def hide_calendar(self):\n        if self._is_calendar_visible:\n            self.calendar_frame.place_forget()\n        \n        self._is_calendar_visible = False\n\n    def erase(self):\n        self.hide_calendar()\n        self.date_var.set(\"\")\n    \n    @property\n    def is_calendar_visible(self):\n        return self._is_calendar_visible\n\n    def _on_entry_focus_out(self):\n        if not str(self.focus_get()).startswith(str(self.calendar_frame)):\n            self.hide_calendar()\n        \n    def _on_calendar_focus_out(self):\n        if self.focus_get() != self:\n            self.hide_calendar()\n\n    def _on_selected_date(self, date):\n        self.date_var.set(date.strftime(self.date_format))\n        self.hide_calendar()\n        \n        if self._on_select_date_command is not None:\n            self._on_select_date_command(date)\n\n    def _on_click(self, event):\n        str_widget = str(event.widget)\n\n        if str_widget == str(self):\n            if not self._is_calendar_visible:\n                self.show_date_on_calendar()\n        else:\n            if not str_widget.startswith(str(self.calendar_frame)) and self._is_calendar_visible:\n                self.hide_calendar()\n\n\nif __name__ == \"__main__\":\n    def Action(a, b, c): print \"DATA ACIONADA\"\n    \n    import sys\n\n    try:\n        from Tkinter import Tk, Frame, Label\n    except ImportError:\n        from tkinter import Tk, Frame, Label\n    \n    root = Tk()\n    root.geometry(\"500x600\")\n    \n    main = Frame(root, pady =15, padx=15)\n    main.pack(expand=True, fill=\"both\")\n    \n    Label(main, justify=\"left\", text=__doc__).pack(anchor=\"w\", pady=(0,15))\n\n    date_var = StringVar()\n    date_var.trace(\"w\", Action)\n    Datepicker(main, dateformat=\"%d/%m/%Y\", datevar=date_var).pack(anchor=\"w\")\n    \n    if 'win' not in sys.platform:\n        style = ttk.Style()\n        style.theme_use('clam')\n\n    root.mainloop()\n",
			"file": "/F/Projetos/desenvolvendo/Livros/src/modules/Datepicker.py",
			"file_size": 18696,
			"file_write_time": 131849439368368558,
			"settings":
			{
				"buffer_size": 18756,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"",
				"About"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 157.0,
		"history":
		[
			"class action:\\ndef __call__:\\n print(\"chamado\")",
			"class action:\\ndef __call__: print(\"chamado\")",
			"class action:",
			"class action: def __call__: print(\"chamado\")",
			"clas actions: def __call__: print(\"chamado\")",
			"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"dir",
			"import tkinter",
			"import Tkinter as tk",
			"Database",
			"x",
			"x = 4",
			"def main ():"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/F/Projetos/desenvolvendo/Livros",
		"/F/Projetos/desenvolvendo/Livros/src",
		"/F/Projetos/desenvolvendo/Livros/src/modules"
	],
	"file_history":
	[
		"/C/Users/Israel/Downloads/validar (2).html",
		"/C/Users/Israel/Downloads/validar.html",
		"/F/Projetos/Desenvolvendo/Livros/src/modules/Table.py",
		"/F/Projetos/desenvolvendo/Livros/src/modules/Datepicker.py",
		"/C/Users/Israel/Downloads/validar (1).html",
		"/F/Projetos/desenvolvendo/Livros/src/modules/Popuphelp.py",
		"/F/Projetos/Desenvolvendo/Livros/src/modules/__init__.py",
		"/F/Projetos/desenvolvendo/Livros/src/Database.py",
		"/F/Projetos/desenvolvendo/Livros/src/Books.py",
		"/F/Projetos/desenvolvendo/Livros/src/Calendar.py",
		"/F/Projetos/desenvolvendo/Livros/src/guis.py",
		"/F/Projetos/desenvolvendo/Livros/src/Table.py",
		"/F/Projetos/Desenvolvendo/Livros/src/guis.py",
		"/F/Projetos/desenvolvendo/Livros/src/ttkcalendar.py",
		"/F/Projetos/Desenvolvendo/FilesInteligence/desktop.ini",
		"/F/Projetos/Desenvolvendo/Livros/sublimeproject/Projeto.sublime-project",
		"/F/Projetos/Parados/Livros/src/Table.py",
		"/F/Projetos/Parados/Livros/src/main.py",
		"/F/Projetos/Parados/Livros/src/Books-Gui.py",
		"/F/Projetos/Outros/FormsApp/src/modules/db.py",
		"/F/Projetos/Outros/FormsApp/src/modules/report.py",
		"/F/Projetos/Outros/FormsApp/src/modules/validate.py",
		"/F/Projetos/Outros/FormsApp/src/modules/utilities.py",
		"/F/Projetos/Outros/FormsApp/src/scriptsUseless/teste_metaclasse.py",
		"/F/Projetos/Outros/FormsApp/src/main.py",
		"/F/Projetos/Outros/FormsApp/src/scriptsUseless/teste_button.py",
		"/F/Projetos/Outros/FormsApp/src/modules/test_conection.py",
		"/C/Users/Israel/AppData/Roaming/Sublime Text 3/Packages/Git/Git.sublime-settings",
		"/C/Users/Israel/AppData/Roaming/Sublime Text 3/Packages/User/Git.sublime-settings",
		"/F/Projetos/Outros/FormsApp/README.md",
		"/F/Projetos/Outros/FormsApp/src/config_projeto_ambiente_sublime/projeto-forms-sublime.sublime-project",
		"/F/Projetos/Outros/FormsApp/src/config_projeto_ambiente_sublime/projeto-forms-sublime.sublime-workspace",
		"/F/Projetos/Outros/Forms/src/modules/db.py",
		"/F/Projetos/Outros/Forms/src/main.py",
		"/F/Projetos/Outros/Forms/src/config_projeto_ambiente_sublime/modules/db.py",
		"/F/Projetos/Outros/Forms/src/config_projeto_ambiente_sublime/main.py",
		"/C/Users/Israel/Downloads/Drag-n-Drop.py",
		"/F/Projetos/Outros/Forms/src/script_hacking/dnd.py",
		"/F/Projetos/Outros/Forms/src/.gitignore",
		"/F/Projetos/Outros/Forms/src/script_hacking/drag.py",
		"/F/Projetos/Outros/Forms/src/index.html",
		"/F/Projetos/Outros/Forms/src/index.php",
		"/F/Projetos/Outros/Forms/src/modues/__init__.py",
		"/F/Projetos/Outros projetos/Forms/src/main.py"
	],
	"find":
	{
		"height": 37.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"labelNameBookVar",
			"alterar",
			"updateLimitInputStartRead",
			"actionSaveNewBook",
			"info",
			"actionWindowEditInfo",
			"Info",
			"info",
			"PanelPerfilGui",
			"find",
			"showAllRows",
			"hiddenRowsWithWord",
			"FindRowGui",
			"Páginas por dia",
			"nDurante",
			"current_text",
			"setter",
			"self.date_var",
			"get_selection",
			"_selected_date",
			"dateLabelVar",
			"popupCalendar",
			"5",
			"\\sFindRow[:|(]",
			"FindRow[:|(]",
			"FindRow",
			"procurar",
			"PopupHelp",
			"_is_calendar_visible",
			"winfo_toplevel",
			"Calendar",
			"hiddenRowsWithWord",
			"FindRow",
			"Popuphelp",
			"PanelTable",
			"Table",
			"PanelTable",
			"ByWord",
			"find_field",
			"EventStop",
			"insertRow",
			"go_next",
			"go_prev",
			"daysRestVar",
			"date",
			"getDaysRest",
			"CalculatorGui",
			"window",
			"AddBookGui",
			"inputTotalPagesVar",
			"inputPagePausedVar",
			"labelNameBookVar",
			"now",
			"panel",
			" (VARCHAR|INTEGER).*",
			"`",
			"self.wid",
			"go_next",
			">",
			"click",
			"dayWidgetLast",
			"mediaPagesDayVar",
			"setMediaPagesDayVar",
			"mediaPagesDayVar",
			"inputDateFrame",
			"dateLabelVar",
			"PanelInfo",
			"PanelPerfil",
			"_cal",
			"_build_calendar",
			"__place_widgets",
			"master",
			"Books()",
			"PanelTable",
			"PanelInfo",
			"setMediaPagesDayVar",
			"setDaysRestLabel",
			"daysRestVar",
			"painelBottomInfo",
			"showMediaPagesDayFrame",
			"getDaysRest",
			"setDatas",
			"setDaysRestLabel",
			"getDaysRest",
			"actionShowMediaPagesDay",
			"calendar",
			"self._date",
			"inputDateFrame",
			"alert",
			"getBook",
			"background",
			"TButton",
			"Gui",
			"PageMarkerGui",
			"self.id_line_selected",
			"Button",
			"id ",
			"Id not",
			", book_id, page_paused",
			"page_paused",
			"actionUpdatePagePausedBook",
			"updatePagePaused",
			"actionWindowEditMarker",
			"actionWindowEdit",
			"getRecordsDb",
			"getPercentReadBooksDb",
			"getBook",
			"getPercentReadBooksDb",
			"PanelTable",
			"setDatasTable",
			"master",
			"actionWindowEdit",
			"Binds(",
			"Binds",
			"BindTable",
			"bind",
			"selectRowEvent",
			"selectRowByNumberLine",
			"\"table\"",
			"_addBinds",
			"color_line",
			"selectRowByNumberLine",
			".unique_id",
			"_addBinds",
			"height_cel",
			"self.height",
			"cnf",
			"kwargs"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"FindRowGui",
			"month_next",
			"month_prev",
			"panelDown",
			"",
			"PanelInfoGui",
			"PanelPerfilGui"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/F/Projetos/desenvolvendo/Livros/src/main.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8891,
						"regions":
						{
						},
						"selection":
						[
							[
								5270,
								5270
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/F/Projetos/desenvolvendo/Livros/src/modules/Guis.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13902,
						"regions":
						{
						},
						"selection":
						[
							[
								3867,
								3867
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1330.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/F/Projetos/desenvolvendo/Livros/src/modules/Books.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4174,
						"regions":
						{
						},
						"selection":
						[
							[
								806,
								806
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 114.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/F/Projetos/desenvolvendo/Livros/src/modules/Database.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5674,
						"regions":
						{
						},
						"selection":
						[
							[
								5228,
								5228
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2090.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/F/Projetos/desenvolvendo/Livros/src/modules/Table.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15189,
						"regions":
						{
						},
						"selection":
						[
							[
								3461,
								3461
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1235.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/C/Users/Israel/Downloads/validar.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1642,
						"regions":
						{
						},
						"selection":
						[
							[
								605,
								605
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 247.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/F/Projetos/desenvolvendo/Livros/src/modules/Datepicker.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18756,
						"regions":
						{
						},
						"selection":
						[
							[
								15972,
								15960
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6268.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.sftp":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Python/Python.sublime-build",
	"project": "Projeto.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 174.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
